En este video comparto mi experiencia y conocimientos sobre cómo llevar las buenas prácticas de Angular, que ya vimos antes con la configuración de Prettier, ESLint y el comando ng-lint, a un entorno de integración continua usando GitHub Actions. Explico cómo automatizar la ejecución de pruebas de estilo y calidad cada vez que un desarrollador contribuye código, de modo que si no se cumplen los estándares definidos, el pull request será rechazado automáticamente. Utilizo un monorepo como ejemplo, pero dejo claro que los mismos principios aplican para un repositorio individual. Demuestro cómo crear una nueva rama, agregar código (incluso de forma deliberada cometiendo malas prácticas para poner a prueba el sistema), y cómo configurar el workflow en GitHub Actions para que ejecute ng-lint durante cada pull request.

Durante la demostración, muestro la importancia de diferenciar entre errores de formato y errores de buenas prácticas, y cómo el sistema de integración continua puede ayudarte a no depender únicamente del revisor humano. Subrayo que aunque localmente el build puede funcionar incluso con malas prácticas, sólo a través de la automatización con GitHub Actions podemos garantizar que no se acepten cambios que no cumplan con las reglas del proyecto. Además, explico paso a paso cómo construir un archivo de workflow que instala las dependencias, corre ng-lint y reporta los resultados en el pull request, permitiendo que el equipo mantenga altos estándares de calidad en el código de manera consistente y automática.

Resalto también la importancia de herramientas modernas y rápidas, como ESBuild y otras basadas en Go o Rust, que optimizan los tiempos en integración continua y pueden generar ahorros significativos en costos de infraestructura. Finalmente, insisto en que gracias a esta automatización, el trabajo del code reviewer se vuelve más valioso, enfocándose en temas de arquitectura y lógica de negocio, mientras que las cuestiones de formato y reglas triviales quedan cubiertas por las herramientas automáticas. Con esta metodología, logro que la calidad y consistencia del código se mantenga sin fricciones y que la revisión humana pueda concentrarse en aspectos realmente importantes.